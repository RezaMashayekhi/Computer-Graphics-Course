// PointLightedCube.js (c) 2012 matsuda and kanda
// Vertex shader program
var VSHADER_SOURCE =
  'attribute vec4 a_Position;\n' +
  'attribute vec4 a_Color;\n' + // Defined constant in main()
  'attribute vec4 a_Normal;\n' +
  'uniform mat4 u_VpMatrix;\n' +
  'uniform mat4 u_ModelMatrix;\n' +    // Model matrix
  'uniform mat4 u_NormalMatrix;\n' +   // Transformation matrix of the normal
  'varying vec3 v_Position;\n' +
  'varying vec3 v_Normal;\n' +
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
  '  gl_Position = u_VpMatrix * u_ModelMatrix * a_Position;\n' +
  '  v_Position = vec3(u_ModelMatrix * a_Position);\n' +
  '  v_Normal = normalize(vec3(u_NormalMatrix * a_Normal));\n' +
     // Add the surface colors due to diffuse reflection and ambient reflection
  '  v_Color = a_Color;\n' + 
  '}\n';

// Fragment shader program
var FSHADER_SOURCE =
  '#ifdef GL_ES\n' +
  'precision mediump float;\n' +
  '#endif\n' +
  'uniform vec3 u_LightColor;\n' +
  'uniform vec3 u_LightPosition;\n' +
  'uniform vec3 u_AmbientLight;\n' +
  'varying vec3 v_Position;\n' +
  'varying vec3 v_Normal;\n' +
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
   // Calculate a normal to be fit with a model matrix, and make it 1.0 in length
   '  vec3 normal = normalize(v_Normal);\n' +
   // Calculate world coordinate of vertex
   // Calculate the light direction and make it 1.0 in length
'  vec3 lightDirection = normalize(u_LightPosition - v_Position);\n' +
   // The dot product of the light direction and the normal
'  float nDotL = max(dot(lightDirection, normal), 0.0);\n' +
   // Calculate the color due to diffuse reflection
'  vec3 diffuse = u_LightColor * v_Color.rgb * nDotL;\n' +
   // Calculate the color due to ambient reflection
'  vec3 ambient = u_AmbientLight * v_Color.rgb;\n' +

  '  gl_FragColor = vec4(diffuse + ambient, v_Color.a);\n' +
  '}\n';

var gl, canvas, a_Position, a_Color, a_Normal, u_ModelMatrix, u_VpMatrix, u_NormalMatrix, lightPosition;
var g_modelMatrix, g_normalMatrix, g_vpMatrix;

function main() {
  // Retrieve <canvas> element
  canvas = document.getElementById('webgl');

  // Get the rendering context for WebGL
  //gl = getWebGLContext(canvas, {stencil:true});
  gl = canvas.getContext("webgl", {stencil:true});
  if (!gl) {
    console.log('Failed to get the rendering context for WebGL');
    return;
  }
  

  // Initialize shaders
  if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
    console.log('Failed to intialize shaders.');
    return;
  }

  // create a plane
  var planeVertices = new Float32Array ( [
    20.0 , -3.0 , 20.0 ,
    20.0 , -3.0 , -20.0 ,
    -20.0 , -3.0 , -20.0 ,
    -20.0 , -3.0 , 20.0
    ]) ;
  var planeColors = new Float32Array ( [
  0.3 , 0.8 , 1.0 ,
  0.3 , 0.8 , 1.0 ,
  0.3 , 0.8 , 1.0 ,
  0.3 , 0.8 , 1.0
  ] ) ;

  
  
    // Create a cube
  //   v6----- v5
  //  /|      /|
  // v1------v0|
  // | |     | |
  // | |v7---|-|v4
  // |/      |/
  // v2------v3
  // Coordinates
  var cubeVertices = new Float32Array ( [
    1.0 , 1.0 , 1.0 , //v0
    -1.0 , 1.0 , 1.0 , //v1
    -1.0 , -1.0 , 1.0 , //v2
    1.0 , -1.0 , 1.0 , //v3
    1.0 , -1.0 , -1.0 , //v4
    1.0 , 1.0 , -1.0 , //v5
    -1.0 , 1.0 , -1.0 , //v6
    -1.0 , -1.0 , -1.0//v7
  ] ) ;
  var cubeColors = new Float32Array ( [
    1 , 0 , 0 , // v0
    1 , 0 , 0 , // v1
    1 , 0 , 0 , // v2
    1 , 0 , 0 , // v3
    1 , 0 , 0 , // v4
    1 , 0 , 0 , // v5
    1 , 0 , 0 , // v6
    1 , 0 , 0 // v7
  ] ) ;  

  
  // Set the clear color and enable the depth test
  gl.clearColor(1, 1, 1, 1);
  //gl.enable(gl.DEPTH_TEST);

  // Get the storage locations of uniform variables and so on
  a_Position = gl.getAttribLocation(gl.program, 'a_Position');
  a_Color = gl.getAttribLocation(gl.program, 'a_Color');
  a_Normal = gl.getAttribLocation(gl.program, 'a_Normal');
  u_ModelMatrix = gl.getUniformLocation(gl.program, 'u_ModelMatrix');
  u_VpMatrix = gl.getUniformLocation(gl.program, 'u_VpMatrix');
  u_NormalMatrix = gl.getUniformLocation(gl.program, 'u_NormalMatrix');
  var u_LightColor = gl.getUniformLocation(gl.program, 'u_LightColor');
  var u_LightPosition = gl.getUniformLocation(gl.program, 'u_LightPosition');
  var u_AmbientLight = gl.getUniformLocation(gl.program, 'u_AmbientLight');
  if (!u_VpMatrix || !u_NormalMatrix || !u_LightColor || !u_LightPosition　|| !u_AmbientLight) { 
    console.log('Failed to get the storage location');
    return;
  }

  lightPosition = new Float32Array ( [10 , 10 , 15.5] ) ;
  // Set the light color (white)
  gl.uniform3f(u_LightColor, 1, 1, 1);
  // Set the light direction (in the world coordinate)
  gl.uniform3f(u_LightPosition, lightPosition[0], lightPosition[1], lightPosition[2]);
  // Set the ambient light
  gl.uniform3f(u_AmbientLight, 0.5, 0.3, 0.3);

  g_modelMatrix = new Matrix4();  // Model matrix
  g_vpMatrix = new Matrix4(); 　 // Model view projection matrix
  g_normalMatrix = new Matrix4(); // Transformation matrix for normals

  
  // Calculate the view projection matrix
  g_vpMatrix.setPerspective(45, canvas.width/canvas.height, 1, 100);
  g_vpMatrix.lookAt(8, 15, 20, 1, 0, -1, 0, 1, 0);

  // Pass the model view projection matrix to u_MvpMatrix
  gl.uniformMatrix4fv(u_VpMatrix, false, g_vpMatrix.elements);

  // Clear color and depth buffer
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT );
  
  
  gl.enable(gl.STENCIL_TEST);
  gl.stencilOp(gl.REPLACE, gl.REPLACE, gl.REPLACE);
  gl.stencilFunc(gl.ALWAYS, 1, 0xffffffff);
  
   
  groundPlane = new Plane ( planeVertices , planeColors ) ; // create the ground plane
  groundPlane.draw();
  
  cube = new Cube ( cubeVertices , cubeColors ) ;
  //cube.draw();
  //cube.translate(1,2,1);
  //cube.scale(1,3,1);
  //cube.rotate(20,0,1,0);
  //cube.setModelMatrix();
  cube.translate(1,2,1);
  cube.scale(1,3,1);
  canvas.onmousemove =  function(ev) { moved(ev, groundPlane, cube); };
  
  
  
}
var lastx = 0;
var lasty=0;
function moved (ev, groundPlane, cube){
  var x = ev.clientX; // x coordinate of a mouse pointer
  var y = ev.clientY; // y coordinate of a mouse pointer
  var rect = ev.target.getBoundingClientRect();
  x = ((x - rect.left) - canvas.width/2)/(canvas.width/2);
  y = (canvas.height/2 - (y - rect.top))/(canvas.height/2);
  if (Math.abs(x-lastx)>Math.abs(y-lasty)){
    let r = (((x-lastx)+1)/2)*180;
    draw(r, groundPlane, cube,0);
  }
  else{
    let r = (((y-lasty)+1)/2)*180;
    draw(r, groundPlane, cube,1);
  }


  lastx=x;
  lasty=y;
}

function draw(r, groundPlane, cube, d){
  gl.enable(gl.STENCIL_TEST);
  gl.stencilOp(gl.REPLACE, gl.REPLACE, gl.REPLACE);
  gl.stencilFunc(gl.ALWAYS, 1, 0xffffffff);
  
  g_modelMatrix=new Matrix4();
  groundPlane.draw();

  gl.stencilFunc(gl.EQUAL, 1, 0xffffffff);
  gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
  gl.disable(gl.DEPTH_TEST);

  
  if(d==0)
    cube.rotate(r,0,1,0);
  else
    cube.rotate(r,1,0,0);
  cube.setModelMatrix();
  groundPlane.shadow(-2.999, cube);
  
  gl.disable(gl.STENCIL_TEST)
  gl.enable(gl.DEPTH_TEST);
  
  cube.draw();
}

function Plane(vertices, colors){
  //v3- -v2
  //|
  //e2
  //|
  //v0-e1-v1
  this.vertices = vertices;
  this.colors = colors;
  e1 = new Float32Array([vertices[3]-vertices[0], vertices[4]-vertices[1], vertices[5]-vertices[2]]);
  e2 = new Float32Array([vertices[9]-vertices[0], vertices[10]-vertices[1], vertices[11]-vertices[2]]);
  normal = new Float32Array([e1[1] * e2[2] - e1[2] * e2[1], e1[2] * e2[0] - e1[0] * e2[2], e1[0] * e2[1] - e1[1] * e2[0]]);
  //console.log(normal);
  this.normals = new Float32Array([
    normal[0], normal[1], normal[2],
    normal[0], normal[1], normal[2],
    normal[0], normal[1], normal[2],
    normal[0], normal[1], normal[2]
  ]);
  /*this.normals = new Float32Array([
    0, 1, 0,
    0, 1, 0,
    0, 1, 0,
    0, 1, 0
  ]);*/
  this.indices = new Uint8Array([
    0, 1, 2,   0,2,3
  ]);
  
  this.modelMatrix = new Matrix4();

  this.verticesBuffer = initArrayBufferForLaterUse(vertices, 3, gl.FLOAT);
  this.colorsBuffer = initArrayBufferForLaterUse(colors, 3, gl.FLOAT);
  this.normalsBuffer = initArrayBufferForLaterUse(this.normals, 3, gl.FLOAT);
  if (!this.verticesBuffer || !this.colorsBuffer || !this.normalsBuffer) return -1;

  // Unbind the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  this.indexBuffer = gl.createBuffer();
  if (!this.indexBuffer) {
    console.log('Failed to create the buffer object');
    return -1;
  }
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);
}

Plane.prototype = {
  /*setModelMatrix: function(m){
    this.modelMatrix.set(m);
  }*/
  shadow: function(sy , cube){
    var lP = lightPosition;
    /*var modelMatrix = new Matrix4();
    modelMatrix.elements = new Float32Array([
      sy - lP[1],          0,             0, 0,
      lP[0],              sy,         lP[2], 1,
      0,                   0,    sy - lP[1],  0,
      -sy * lP[0], -sy*lP[1],    -sy * lP[2], -lP[1]
    ]);*/

    var modelMatrix = new Matrix4();
    modelMatrix.elements = new Float32Array([
      1,                                                     0,                                  0,         0,
      lP[0]/(sy-lP[1]),                          sy/(sy-lP[1]),                 lP[2]/(sy - lP[1]),         1/(sy - lP[1]),
      0,                                                     0,                                  1,         0,
      - (lP[0]*sy)/(sy - lP[1]),      -(sy*lP[1])/(sy - lP[1]),         -(sy * lP[2])/(sy - lP[1]),      -(lP[1])/(sy - lP[1])
    ]);

    /*var modelMatrix = new Matrix4();
    modelMatrix.elements = new Float32Array([
      1, 0, 0 , 0,
      0, 1, 0, 0,
      0, 0, 1, 0,
      10, 1, 1, 1
    ]);*/
    //gl.uniformMatrix4fv(u_ModelMatrix,false, modelMatrix.elements);
    //g_modelMatrix = new Matrix4();
    //g_modelMatrix.setRotate(90,1,0,0);
    modelMatrix.set(modelMatrix.multiply(g_modelMatrix));
    //g_modelMatrix.set(modelMatrix);
    //console.log(g_modelMatrix);
    gl.uniformMatrix4fv(u_ModelMatrix,false, modelMatrix.elements);

    // Calculate the matrix to transform the normal based on the model matrix
    g_normalMatrix.setInverseOf(modelMatrix);
    g_normalMatrix.transpose();
    // Pass the transformation matrix for normals to u_NormalMatrix
    gl.uniformMatrix4fv(u_NormalMatrix, false, g_normalMatrix.elements);

    shadowColors = this.colors.map(function(x) { return x * 0.4; });
    shadowColorsBuffer = initArrayBufferForLaterUse(shadowColors, 3, gl.FLOAT);

    
    initAttribute(a_Position, cube.p1.verticesBuffer);
    initAttribute(a_Color, shadowColorsBuffer);
    initAttribute(a_Normal, cube.p1.normalsBuffer);
    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
    //console.log(cube.p1.normals)
    
    initAttribute(a_Position, cube.p2.verticesBuffer);
    initAttribute(a_Color, shadowColorsBuffer);
    initAttribute(a_Normal, cube.p2.normalsBuffer);
    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
    //console.log(cube.p2.normals)
    
    initAttribute(a_Position, cube.p3.verticesBuffer);
    initAttribute(a_Color, shadowColorsBuffer);
    initAttribute(a_Normal, cube.p3.normalsBuffer);
    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
    //console.log(cube.p3.normals)
    
    
    initAttribute(a_Position, cube.p4.verticesBuffer);
    initAttribute(a_Color, shadowColorsBuffer);
    initAttribute(a_Normal, cube.p4.normalsBuffer);
    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
    //console.log(cube.p4.normals)
    
    
    initAttribute(a_Position, cube.p5.verticesBuffer);
    initAttribute(a_Color, shadowColorsBuffer);
    initAttribute(a_Normal, cube.p5.normalsBuffer);
    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
    //console.log(cube.p5.normals)
    
    
    initAttribute(a_Position, cube.p6.verticesBuffer);
    initAttribute(a_Color, shadowColorsBuffer);
    initAttribute(a_Normal, cube.p6.normalsBuffer);
    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
    
    //console.log(cube.p6.normals)
  }
  , draw: function () {
    gl.uniformMatrix4fv(u_ModelMatrix, false, g_modelMatrix.elements);
    
    g_normalMatrix.setInverseOf(g_modelMatrix);
    g_normalMatrix.transpose();
    gl.uniformMatrix4fv(u_NormalMatrix, false, g_normalMatrix.elements);
    
    initAttribute(a_Position, this.verticesBuffer);
    initAttribute(a_Color, this.colorsBuffer);
    initAttribute(a_Normal, this.normalsBuffer);
    // Draw
    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
  }
}

function Cube(vertices, colors){
    // Create a cube
  //   v6----- v5
  //  /|      /|
  // v1------v0|
  // | |     | |
  // | |v7---|-|v4
  // |/      |/
  // v2------v3
  
  // 0123 p1
  // 0345 p2
  // 0561 p3
  // 1672 p4
  // 2743 p5
  // 4765 p6
  var planeVertices1 = new Float32Array ( [
    vertices[0], vertices[1], vertices[2],
    vertices[3], vertices[4], vertices[5],
    vertices[6], vertices[7], vertices[8],
    vertices[9], vertices[10], vertices[11]
    ]) ;
  var planeColors = new Float32Array ( [
    colors[0], colors[1], colors[2],
    colors[3], colors[4], colors[5],
    colors[6], colors[7], colors[8],
    colors[9], colors[10], colors[11]
  ] ) ;
  this.p1 = new Plane(planeVertices1, planeColors);

  var planeVertices2 = new Float32Array ( [
    vertices[0], vertices[1], vertices[2],
    vertices[9], vertices[10], vertices[11],
    vertices[12], vertices[13], vertices[14],
    vertices[15], vertices[16], vertices[17]
    ]) ;
  var planeColors2 = new Float32Array ( [
    colors[0], colors[1], colors[2],
    colors[9], colors[10], colors[11],
    colors[12], colors[13], colors[14],
    colors[15], colors[16], colors[17]
  ] ) ;
  this.p2 = new Plane(planeVertices2, planeColors2);

  var planeVertices3 = new Float32Array ( [
    vertices[0], vertices[1], vertices[2],
    vertices[15], vertices[16], vertices[17],
    vertices[18], vertices[19], vertices[20],
    vertices[3], vertices[4], vertices[5]
    ]) ;
  var planeColors3 = new Float32Array ( [
    colors[0], colors[1], colors[2],
    colors[15], colors[16], colors[17],
    colors[18], colors[19], colors[20],
    colors[3], colors[4], colors[5]
  ] ) ;
  this.p3 = new Plane(planeVertices3, planeColors3);

  var planeVertices4 = new Float32Array ( [
    vertices[3], vertices[4], vertices[5],
    vertices[18], vertices[19], vertices[20],
    vertices[21], vertices[22], vertices[23],
    vertices[6], vertices[7], vertices[8]
    ]) ;
  var planeColors4 = new Float32Array ( [
    colors[3], colors[4], colors[5],
    colors[18], colors[19], colors[20],
    colors[21], colors[22], colors[23],
    colors[6], colors[7], colors[8]
  ] ) ;
  this.p4 = new Plane(planeVertices4, planeColors4);

  var planeVertices5 = new Float32Array ( [
    vertices[6], vertices[4], vertices[5],
    vertices[21], vertices[19], vertices[20],
    vertices[12], vertices[22], vertices[23],
    vertices[9], vertices[10], vertices[11]
    ]) ;
  var planeColors5 = new Float32Array ( [
    colors[6], colors[4], colors[5],
    colors[21], colors[19], colors[20],
    colors[12], colors[22], colors[23],
    colors[9], colors[10], colors[11]
  ] ) ;
  this.p5 = new Plane(planeVertices5, planeColors5);

  var planeVertices6 = new Float32Array ( [
    vertices[12], vertices[13], vertices[14],
    vertices[21], vertices[22], vertices[23],
    vertices[18], vertices[19], vertices[20],
    vertices[15], vertices[16], vertices[17]
    ]) ;
  var planeColors6 = new Float32Array ( [
    colors[12], colors[13], colors[14],
    colors[21], colors[22], colors[23],
    colors[18], colors[19], colors[20],
    colors[15], colors[16], colors[17]
  ] ) ;
  this.p6 = new Plane(planeVertices6, planeColors6);

  this.tMatrix = new Matrix4();
  this.rMatrix = new Matrix4();
  this.sMatrix = new Matrix4();
}

Cube.prototype = {
  /*setModelMatrix: function(m){
    this.modelMatrix.set(m);
  }*/
  translate: function(x,y,z){
    this.tMatrix = new Matrix4();
    this.tMatrix.setTranslate(x,y,z);
  } 
  ,rotate: function(r,x,y,z){
    //this.rMatrix = new Matrix4();
    this.rMatrix.rotate(r,x,y,z);
  }
  ,scale: function(x,y,z){
    //g_modelMatrix.translate(0,-1,0);
    //g_modelMatrix.scale(x,y,z);
    this.sMatrix = new Matrix4();
    this.sMatrix.setScale(x,y,z);
    //g_modelMatrix.translate(0,1,0);
  }
  
  ,setModelMatrix: function(){
    //g_modelMatrix.setTranslate(0,0,0);
    g_modelMatrix.set(this.tMatrix);
    g_modelMatrix.multiply(this.rMatrix);
    g_modelMatrix.multiply(this.sMatrix);
  }

  ,draw: function () {
    /*g_mvpMatrix.set(viewProjMatrix);
    g_mvpMatrix.multiply(this.modelMatrix);
    gl.uniformMatrix4fv(u_MvpMatrix, false, g_mvpMatrix.elements);
    */
    
    // Draw
    this.p1.draw();
    this.p2.draw();
    this.p3.draw();
    this.p4.draw();
    this.p5.draw();
    this.p6.draw();
  }
}

function initArrayBufferForLaterUse(data, num, type){
  var buffer = gl.createBuffer();   // Create a buffer object
  if (!buffer) {
    console.log('Failed to create the buffer object');
    return null;
  }
  // Write date into the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);

  // Store the necessary information to assign the object to the attribute variable later
  buffer.num = num;
  buffer.type = type;

  return buffer;
}

function initAttribute(a_Attribute, buffer){
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    // Assign the buffer object to the attribute variable
    gl.vertexAttribPointer(a_Attribute, buffer.num, buffer.type, false, 0, 0);
    // Enable the assignment of the buffer object to the attribute variable
    gl.enableVertexAttribArray(a_Attribute);
}


